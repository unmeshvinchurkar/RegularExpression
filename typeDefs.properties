%BASIC_REG_EX%
//____________________________________________________
DIGIT=0|1|2|3|4|5|6|7|8|9
CHAR=a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|\s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|_
ALL_CHAR=a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|\s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|_|0|1|2|3|4|5|6|7|8|9|\+|%|\?|!|-|=|\(|\)|\*|&|\^|#|{|}|[|]|"|'|;|:|~|`|,| |<|>|\/
OPERATOR=-|\/|%|\+|\*
URANARY_OPERATOR=^|!
SINGLE_OPERATOR=\+\+|--
NOT_OPERATOR=!
LOGICAL_OPERATOR=and|or
COMPARISON_OPERATOR===|!=|<=|>=|<|>
SIGN=-|\+
DOUBLE_Q="
SINGLE_Q='
OPEN_CURLY={
CLOSE_CURLY=}
SEMICOLON=;
COMMA=\,
OPEN_BRACKET=\(
CLOSE_BRACKET=\)
EQUALS==
DOUBLE_EQUALS===
SPACE=s
SPACE_EMPTY=s*
TYPE=int|char|string|float|boolean
INT=int
CHAR_CLASS=char
FLOAT=float
STRING=string
BOOLEAN=boolean
BOOL_VALUE=true|false
FUNCTION=function
BREAK=break
CONTINUE=continue
RETURN=return
FOR=for
ELSE=el\se
IF=if
DO=do
WHILE=while
VOID=void
START_TAG=<
START_TAG=>
COLON=:
%END%


%TOKEN_CLASSES%
//_______________________________________________________________
EQUALS=EQUALS
COLON=COLON
COMPARISON_OPERATOR=COMPARISON_OPERATOR
COMMA=COMMA
WHILE=WHILE
BOOL_VALUE=BOOL_VALUE
FOR=FOR
ELSE=ELSE
IF=IF
BREAK=BREAK
CONTINUE=CONTINUE
RETURN=RETURN
TYPE=TYPE
VOID=VOID
OPEN_CURLY=OPEN_CURLY
CLOSE_CURLY=CLOSE_CURLY
SEMICOLON=SEMICOLON
OPEN_BRACKET=OPEN_BRACKET
CLOSE_BRACKET=CLOSE_BRACKET
OPERATOR=OPERATOR
FUNCTION=FUNCTION
URANARY_OPERATOR=URANARY_OPERATOR
SINGLE_OPERATOR=SINGLE_OPERATOR
NOT_OPERATOR=NOT_OPERATOR
LOGICAL_OPERATOR=LOGICAL_OPERATOR
KEYWORD=INT|FUNCTION|BREAK|CONTINUE|FOR|DO|WHILE|VOID
VARNAME=CHAR(CHAR|DIGIT)*
INTEGER=DIGIT+
FLOAT=DIGIT*(\.)?DIGIT+
CHAR=SINGLE_Q(ALL_CHAR)SINGLE_Q
BOOLEAN=BOOL_VALUE
STRING=DOUBLE_Q(ALL_CHAR)*DOUBLE_Q
SPACE_EMPTY=SPACE_EMPTY
%END%


%TERMINALS%
ELSE
TYPE
or
and
VALUES=INT|FLOAT|STRING|CHAR|BOOLEAN
VALUE=INT|FLOAT|VARNAME
VARNAME
BOOL_VALUE=BOOL_VALUE
{
}
,
+
*
-
/
%
)
(
=
%END%



%GRAMMER%
//______________________________________________________________
VALUES=INT|FLOAT|STRING|CHAR|BOOLEAN
VALUE=INT|FLOAT|VARNAME

FUNCTION_STMT=FUNCTION(FUNCTION_PARAM){STATEMENT_LIST_WITHOUT_FUN}
FUNCTION_PARAM=FUNCTION_PARAM_TERM,FUNCTION_PARAM_TERM
FUNCTION_PARAM=FUNCTION_PARAM_TERM
FUNCTION_PARAM_TERM =TYPE VARNAME

WHILE_STMT=WHILE(LOGICAL_EXPR){STATEMENT_WITHOUT_FUN}

FOR_STMT=FOR(FOR_DECLARATION_STMT SEMICOLON LOGICAL_EXPR SEMICOLON ASSIGN_STMT){STATEMENT_LIST_WITHOUT_FUN}
FOR_DECLARATION_STMT=DECLARATION_STMT
FOR_DECLARATION_STMT=ASSIGN_STMT

IF_STMT=IF_STMT_TERM ELSE IF_STMT_TERM
IF_STMT=IF_STMT_TERM ELSE_STMT_TERM
IF_STMT=IF_STMT_TERM
IF_STMT_TERM=IF(LOGICAL_EXPR){STATEMENT_WITHOUT_FUN}
ELSE_STMT_TERM=ELSE{STATEMENT_WITHOUT_FUN}

STMT_LIST=FUNCTION_STMT STMT_LIST
STMT_LIST=FUNCTION_STMT

STATEMENT_LIST_WITHOUT_FUN={STATEMENT_LIST_WITHOUT_FUN}
STATEMENT_LIST_WITHOUT_FUN=STATEMENT_WITHOUT_FUN_DECLARATION STATEMENT_WITHOUT_FUN
STATEMENT_WITHOUT_FUN=STATEMENT_WITHOUT_FUN_DECLARATION
STATEMENT_WITHOUT_FUN_DECLARATION=DECLARATION_STMT|ASSIGN_STMT|FOR_STMT|IF_ELSE_STMT|LOGICAL_ASSIGN_STMT

DECLARATION_STMT=TYPE D_TERM;
D_TERM=VARNAME=VALUES,D_TERM
D_TERM=VARNAME=VALUES
D_TERM=VARNAME,D_TERM
D_TERM=VARNAME

ASSIGN_STMT=VARNAME=EXPR;
ASSIGN_STMT=VARNAME;
LOGICAL_ASSIGN_STMT=VARNAME=LOGICAL_EXPR;

EXPR=TERM+EXPR
EXPR=TERM-EXPR
EXPR=TERM
TERM=FACTOR*TERM
TERM=FACTOR/TERM
TERM=FACTOR
FACTOR=(EXPR)
FACTOR=VALUE|VARNAME

LOGICAL_EXPR=L_TERM or LOGICAL_EXPR
LOGICAL_EXPR=L_TERM
L_TERM=F_TERM and L_TERM
L_TERM=F_TERM
F_TERM=E_TERM COMPARISON_OPERATOR F_TERM
E_TERM=(LOGICAL_EXPR)
E_TERM=|VARNAME|BOOL_VALUE

//LOGICAL_EXPR=(LOGICAL_EXPR)
//LOGICAL_EXPR=L_TERM or LOGICAL_EXPR
//LOGICAL_EXPR=L_TERM and LOGICAL_EXPR
//LOGICAL_EXPR=L_TERM COMPARISON_OPERATOR LOGICAL_EXPR
//LOGICAL_EXPR=L_TERM
//L_TERM=VARNAME|BOOL_VALUE

%END%








